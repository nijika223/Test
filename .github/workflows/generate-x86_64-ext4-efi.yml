# This is a basic workflow to help you get started with Actions

name: Generate x86_64-ext4-efi Firmware

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      # version:
      #   description: '指定 ImmortalWrt 版本'
      #   required: true
      #   default: '23.05.4'

      # rootfs_size:
      #   description: '选择 RootFS 分区大小'
      #   required: true
      #   default: '800'
      #   type: choice
      #   options:
      #     - '800'
      #     - '2000'
      #     - '5600'
      
      upload-all:
        description: 将编译出的镜像上传到 Artifacts
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      release: 
        description: 将编译出的镜像上传到 Release
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      release_version:
        description: 'GitHub Release'
        required: false
        default: '1.0.0-ext4-efi'


env:
  DOWNLOAD_BASE: https://downloads.immortalwrt.org
  VENDOR: immortalwrt
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Generate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      # VERSION: ${{ github.event.inputs.version }}
      # ROOTFS_SIZE: ${{ github.event.inputs.rootfs_size }}
      VERSION: '24.10.0'
      ROOTFS_SIZE: '2000'
      RELEASE_VERSION: ${{ github.event.inputs.release_version }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Initialization Environment
        run: |
          sudo apt-get -qq update && \
          sudo apt-get -qq update && \
          sudo apt-get -qq install build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev && \
          sudo apt-get -qq install xsltproc rsync wget unzip python3 python3-setuptools qemu-utils

      - name: Setup Environment Variables
        run: |
          echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
        with: 
          path: origin

      - name: Download Image Builder
        run: |
          wget $DOWNLOAD_BASE/releases/$VERSION/targets/x86/64/$VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
          tar -xvf $VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
          rm -rf $VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64.tar.zst
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/$VENDOR-imagebuilder-$VERSION-x86-64.Linux-x86_64/

      - name: Download External Packages
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          sed -i 's/\r$//' external-package-urls.txt
          cat external-package-urls.txt | xargs wget -P packages

      - name: Run Patch and DIY Scripts
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          sed -i 's/\r$//' builder-patch-ext4-efi.sh
          sed -i 's/\r$//' clash.sh
          sed -i 's/\r$//' zsh.sh
          bash scripts/builder-patch-ext4-efi.sh
          bash scripts/clash.sh
          bash scripts/zsh.sh
          
      - name: Generate Firmware
        working-directory: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64
        run: |
          bash build.sh

      - name: Upload All Firmware to Artifacts
        if: github.event.inputs.upload-all == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VENDOR }}-${{ env.VERSION }}-x86_64-images-${{ env.DATETIME }}
          path: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*

      - name: Upload Firmware to Release
        if: github.event.inputs.release == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ env.VENDOR }}-imagebuilder-${{ env.VERSION }}-x86-64.Linux-x86_64/bin/targets/x86/64/*
          asset_name: ${{ github.event.repository.name }}-${{ github.sha }}
          tag: v${{ env.RELEASE_VERSION }}
          overwrite: true
